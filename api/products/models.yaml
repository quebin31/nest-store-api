Category:
  type: object
  properties:
    name:
      description: Unique category name, not meant to be used as display name
      type: string
      pattern: '^[a-z][a-z_]+$'
    displayName:
      description: Display name
      type: string

ProductCategoriesResBody:
  type: object
  properties:
    categories:
      type: array
      items:
        type: object
        allOf:
          - $ref: '#/Category'

ProductBaseInput:
  type: object
  properties:
    name:
      type: string
      minLength: 10
      maxLength: 64
    description:
      type: string
      minLength: 10
      maxLength: 256
    price:
      description: Will be rounded to two decimals.
      type: number
      format: float
    categoryName:
      description: The category name, not to be confused with its display name.
      type: string
      pattern: '^[a-z][a-z_]+$'
    minQuantity:
      description: The minimum quantity that can be bought
      type: integer
      minimum: 1
      maximum: maxQuantity
    maxQuantity:
      description: The maximum quantity that can be bought
      type: integer
      minimum: minQuantity

# Multipart schema
CreateProductReqBody:
  type: object
  properties:
    # First part
    product:
      type: object
      allOf:
        - $ref: '#/ProductBaseInput'
        - properties:
            active:
              description: Whether or not the product is active.
              type: boolean
              default: false
            availableStock:
              description: Initial available stock.
              type: integer
              minimum: 1
      required:
        - name
        - description
        - price
        - categoryName
        - minQuantity
        - maxQuantity
        - availableStock
    # Images part
    images:
      description: |
        Images part, requires at least one image, the first one gets to be used
        as the thumbnail.
      type: array
      minItems: 1
      maxItems: 5
      items:
        type: string
        format: binary
  required: [ product, images ]

UpdateProductReqBody:
  type: object
  allOf:
    - $ref: '#/ProductBaseInput'
    - properties:
        active:
          description: Whether or not the product is active.
          type: boolean
        availableStockDelta:
          description: |
            Delta to be applied to the current available stock, for example, a delta of 5 will add 
            5 to the available stock, while a delta of -2 will subtract 2 from the current available 
            stock. Will fail if the resultant available stock is negative.
          type: integer

ProductResBody:
  type: object
  properties:
    name:
      type: string
    description:
      type: string
    price:
      description: Price rounded to two decimals.
      type: number
      format: float
    active:
      description: Whether or not the product is active.
      type: boolean
    category:
      type: object
      allOf:
        - $ref: '#/Category'
    minQuantity:
      description: The minimum quantity that can be bought
      type: integer
    maxQuantity:
      description: The maximum quantity that can be bought
      type: integer
    availableStock:
      description: How much stock of the product is currently available
      type: integer
    thumbnailUrl:
      type: string
      format: url
    images:
      type: array
      items:
        type: object
        properties:
          imageId:
            type: string
            format: uuid
          imageUrl:
            type: string
            format: url

ProductsPageResBody:
  type: object
  properties:
    products:
      type: array
      items:
        type: object
        allOf:
          - $ref: '#/ProductResBody'
    length:
      description: Number of returned posts.
      type: integer
      example: 25
    cursor:
      description: To get next page from where the returned results end.
      type: string
      format: date-time

UploadProductImagesReqBody:
  type: object
  properties:
    image:
      type: string
      format: binary
  required: [ image ]

UpdateProductImageReqBody:
  type: object
  properties:
    image:
      type: string
      format: binary
  required: [ image ]
