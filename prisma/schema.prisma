// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum Role {
    user
    manager
    admin

    @@map("role")
}

model User {
    id        String   @id @default(uuid()) @db.Uuid
    createdAt DateTime @default(now()) @map("created_at")

    email      String    @unique
    password   String
    name       String
    role       Role      @default(user)
    verifiedAt DateTime? @map("verified_at")

    products      Product[]
    cartItems     CartItem[]
    favorites     ProductUserFavorite[]
    orders        Order[]
    cancelReasons OrderCancelReason[]

    @@map("users")
}

model Category {
    name        String    @id
    displayName String    @map("display_name")
    products    Product[]

    @@map("categories")
}

enum ProductState {
    active
    inactive
    deleted

    @@map("product_state")
}

model Product {
    id        String   @id @default(uuid()) @db.Uuid
    createdAt DateTime @unique @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")

    name         String
    description  String
    price        Decimal        @db.Decimal(10, 2)
    thumbnailUrl String?        @map("thumbnail_url")
    state        ProductState   @default(inactive)
    images       ProductImage[]

    minQuantity    Int @map("min_quantity")
    maxQuantity    Int @map("max_quantity")
    availableStock Int @map("available_stock")

    categoryName String   @map("category_name")
    category     Category @relation(fields: [categoryName], references: [name])

    createdById String @map("created_by_id") @db.Uuid
    createdBy   User   @relation(fields: [createdById], references: [id])

    inCartItems CartItem[]
    inFavorites ProductUserFavorite[]
    inOrders    OrderItem[]

    @@map("products")
}

model ProductImage {
    id        String   @id @default(uuid()) @db.Uuid
    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")

    imageUrl String @map("image_url")

    productId String  @map("product_id") @db.Uuid
    product   Product @relation(fields: [productId], references: [id])

    @@map("product_images")
}

model CartItem {
    userId    String   @map("user_id") @db.Uuid
    productId String   @map("product_id") @db.Uuid
    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")

    quantity Int

    user    User    @relation(fields: [userId], references: [id])
    product Product @relation(fields: [productId], references: [id])

    @@id([userId, productId])
    @@map("cart_items")
}

model ProductUserFavorite {
    userId    String   @map("user_id") @db.Uuid
    productId String   @map("product_id") @db.Uuid
    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")

    user    User    @relation(fields: [userId], references: [id])
    product Product @relation(fields: [productId], references: [id])

    @@id([userId])
    @@map("product_user_favorites")
}

enum OrderState {
    pending
    confirmed
    received
    canceled

    @@map("order_state")
}

model Order {
    id        String   @id @default(uuid()) @db.Uuid
    createdAt DateTime @unique @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")

    state OrderState
    items OrderItem[]

    userId String @map("user_id") @db.Uuid
    user   User   @relation(fields: [userId], references: [id])

    receivedAt   DateTime?          @map("received_at")
    cancelReason OrderCancelReason?

    @@map("orders")
}

model OrderItem {
    orderId   String   @map("order_id") @db.Uuid
    productId String   @map("product_id") @db.Uuid
    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")

    quantity    Int
    lockedPrice Decimal @map("locked_price") @db.Decimal(10, 2)

    order   Order   @relation(fields: [orderId], references: [id])
    product Product @relation(fields: [productId], references: [id])

    @@id([orderId, productId])
    @@map("orders_items")
}

model OrderCancelReason {
    id        String   @id @db.Uuid
    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")

    codeId String          @map("code_id")
    code   OrderCancelCode @relation(fields: [codeId], references: [code])
    reason String?

    orderId String @unique @map("order_id") @db.Uuid
    order   Order  @relation(fields: [orderId], references: [id])

    canceledById String @map("canceled_by_id") @db.Uuid
    canceledBy   User   @relation(fields: [canceledById], references: [id])

    @@map("orders_cancel_reasons")
}

model OrderCancelCode {
    createdAt        DateTime            @default(now()) @map("created_at")
    code             String              @id
    description      String
    inCanceledOrders OrderCancelReason[]

    @@map("orders_cancel_codes")
}
